This file contains a variety of development notes. I'll keep my FIXMEs
and TODOs in here.

We should consider disabling some "unsafe" Lua built in functions such
as dofile(), load() and loadfile(), etc.

It appears that "Sandbox" is the term you're looking for.
See http://lua-users.org/wiki/SandBoxes. Also read the discussion
of the topic at http://stackoverflow.com/q/966162/115589 and
http://stackoverflow.com/q/1224708/115589

It seems that the accepted solution is to not call luaL_openlibs()
and rather copying and modifying linit.c according to your needs.

The state files should not have any global variables. I need the states to
be reentrant, so that you can push and pop states from a stack. This is
useful in, say, an adventure game scenario where the town map is a state
and the player enters a shop which is another state that gets pushed on
the states stack. If the player then leaves the shop, the shop state is
popped, so that the player is back in town where he left.

This pushing and popping of states has some implications for the resource
cache: The graphics used in the shop should be released if the player
leaves, but not the town's graphics. This implies that either (a) the
resource cache should also work on a stack that gets pushed and popped,
or (b) the resource cache should be a part of `struct game_state`.

I'm thinking that (b) might be the more elegant solution at the moment,
but I should think on it a bit more.

This scheme of pushing/popping states also has some implications on the
save game system

My Bitmap module should have a #pragma pack() at the
structure declaration. The PAK file module should have
it too. See the bottom of this section on the wikipedia:
http://en.wikipedia.org/wiki/Data_structure_alignment in the section
"Typical alignment of C structs on x86" (Seems it is not a big GCC issue,
rather a MSVC thing)

Speaking of the PAK file module, the ZIP file format turns out to be
not that different, so I should look into it more closely.

The bmp.c can do with an bm_arc(bmp, start_angle, end_angle, radius)
function.

bmp.c is also still missing a bm_fillellipse() function.

Descision whether to stick with scancodes or switch to keycodes? Or make
it configurable?

Docs says SDL_UpdateTexture() be slow. Do something different.

# Editor:

Changing the Working Directory affects the tilesets, so you should rather
set the working directory when you start a new project.

I should rethink the way the class and id is handled.  The specific
problem is that each tile can only have one class and id, regardless of
the number of layers.  I think they should be stored more like the meta
data in the tilesets.  If I do this before I implement loading of the
maps it may save me some trouble later.
